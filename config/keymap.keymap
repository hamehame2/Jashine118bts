//#include <dt-bindings/zmk/mouse.h>

//#include <behaviors/rgbled_widget.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
//#include <behaviors/naginata.dtsi>

#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>


#define BASE     0
#define NAGINATA 1
#define MOUSE    2
#define LOWER    3
#define RAISE    4
#define ADJUST   5
#define MOD      6
#define SCROLL   3
#define MUHEN   7
#define HENKA   8




/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};

/ {
    behaviors {
        // スクロール用のbehaviorの設定
        scroll_down_up: behavior_sensor_rotate_mouse_wheel_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <20>; // スクロールのタップ時間
        };

        // Customed Hold-Tap for SandS
        // 他キーとの同時押しのみHold(Shift), 500m以上長押しすると、Tap(Space)のリピート
        SandS: SandS {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <500>; // tap-unless-interruptedのため意味は無いが、設定しないとエラーはく
            quick-tap-ms = <500>;
            bindings = <&kp>, <&kp>;

            display-name = "SandS";
        };
    };
};

&sl { release-after-ms = <250>; }; // time needed for double click (for mkp_exit_AML)
/ {
    macros {
        // When in AML, move to default layer when key (except mouse button) pressed
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog MOUSE &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_layer_0";
        };

        // When LCLK pressed, exit AML (after 250ms cause by sticky layer)
        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl MOUSE>;

            label = "MKP_EXIT_AML";
        };

        // Support swapping into Scroll layer when AML is activated

        to_scroll_layer: to_scroll_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to SCROLL>,
                <&macro_press>,
                <&mo SCROLL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo SCROLL>;
        };
    };
};

//#include <layout_shift_kp_override.dtsi>
// Layout Shift Overlay - Replaces &kp behavior with custom implementation
// This file should be included in keyboard config to override &kp behavior

#include "layout_shift.dtsi"

/ {
    behaviors {
        // Keep the original key_press behavior for ZMK core components
        original_key_press: original_key_press {
            compatible = "zmk,behavior-key-press";
            #binding-cells = <1>;
            label = "KEY_PRESS";
        };

        // Override the existing &kp behavior to use our custom implementation
        kp: key_press {
            compatible = "zmk,behavior-layout-shift-key-press";
            #binding-cells = <1>;
            label = "LAYOUT_SHIFT_KEY_PRESS";
        };
    };
};


#if 0  // ← 無効化　新下駄が相性悪いため
	/ {
	  macros {
	    // 1) Shift+Enter → Backspace
	    se_then_bs: se_then_bs {
	      compatible = "zmk,behavior-macro";
	      #binding-cells = <0>;
	      bindings = <&kp LS(RET) &kp BSPC>;
	    };
	
	    // 2) Enter → End
	    enter_then_end: enter_then_end {
	      compatible = "zmk,behavior-macro";
	      #binding-cells = <0>;
	      bindings = <&kp RET &kp END>;
	    };
	
	    // 3) ← の後に 再変換 (Win + /)
	    left_then_henkan: left_then_henkan {
	      compatible = "zmk,behavior-macro";
	      #binding-cells = <0>;
	      bindings = <&kp LEFT &kp LG(SLASH)>;
	    };
	  };
	};
	
	
	/ {
	  combos {
	    compatible = "zmk,combos";
	
	    // 84 + 94 → Enter
	    combo_enter_84_94 {
	      timeout-ms = <80>;
	      key-positions = <84 94>;
	      bindings = <&kp RET>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 77 → カタカナ変換 (F7)
	    combo_katakana_f7 {
	      timeout-ms = <80>;
	      key-positions = <63 64 77>;
	      bindings = <&kp F7>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 54 → Shift+Enter → Backspace
	    combo_se_bs_63_64_54 {
	      timeout-ms = <80>;
	      key-positions = <63 64 54>;
	      bindings = <&se_then_bs>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 55 → ← の後に 再変換 (Win+/)
	    combo_left_then_henkan_63_64_55 {
	      timeout-ms = <80>;
	      key-positions = <63 64 55>;
	      bindings = <&left_then_henkan>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 56 → Delete
	    combo_del_63_64_56 {
	      timeout-ms = <80>;
	      key-positions = <63 64 56>;
	      bindings = <&kp DEL>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 57 → Esc
	    combo_esc_63_64_57 {
	      timeout-ms = <80>;
	      key-positions = <63 64 57>;
	      bindings = <&kp ESC>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 73 → Enter → End
	    combo_enter_then_end_63_64_73 {
	      timeout-ms = <80>;
	      key-positions = <63 64 73>;
	      bindings = <&enter_then_end>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 74 → → (RIGHT)
	    combo_right_63_64_74 {
	      timeout-ms = <80>;
	      key-positions = <63 64 74>;
	      bindings = <&kp RIGHT>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 75 → Shift+→
	    combo_sright_63_64_75 {
	      timeout-ms = <80>;
	      key-positions = <63 64 75>;
	      bindings = <&kp LS(RIGHT)>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 94 → ← (LEFT)
	    combo_left_63_64_94 {
	      timeout-ms = <80>;
	      key-positions = <63 64 94>;
	      bindings = <&kp LEFT>;
	      // layers = <0>;
	    };
	
	    // 63 + 64 + 95 → Shift+←
	    combo_sleft_63_64_95 {
	      timeout-ms = <80>;
	      key-positions = <63 64 95>;
	      bindings = <&kp LS(LEFT)>;
	      // layers = <0>;
	    };
	  };
	};
#endif  // ← ここまで無効


/ {
    keymap {
        compatible = "zmk,keymap";
//BASE
        layer_0 {
            bindings =<
                &kp ESC        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11                                      &kp F12 &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp PSCRN &tog_ls_off &tog_ls_on &kp DEL
				&kp LANG5      &kp N1 &kp N2 &kp N3 &kp N4 &kp N5  &kp N6 &kp KP_NUM &kp KP_SLASH &kp KP_MULTIPLY &kp KP_MINUS &kp MINUS                         &kp BACKSLASH &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp EQUAL &kp GRAVE
				&kp TAB        &kp Q &kp W  &kp E  &kp R  &kp T    &kp Y &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_PLUS  &kp Y                                        &kp INT3 &kp Y &kp U &kp I &kp O &kp P &kp LBKT &kp RBKT
				&mt LCTRL CAPS &kp A  &kp S  &kp D  &kp F &kp G     &kp LSHFT  &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp LSHFT  &kp SPACE                                       &kp LBKT &kp H &kp J &kp K &kp L &kp SEMI &kp SQT &kp INT1
				&kp LSHFT      &kp Z  &kp X  &kp C  &kp V &kp B     &kp LBKT &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp RET &kp LBKT                    &kp RBKT &kp N &kp M &kp COMMA &kp DOT &kp FSLH  &kp INT3 &kp UP
				&kp LCTRL      &kp LWIN &kp LALT &mo NAGINATA &lt MUHEN BSPC &SandS LSHFT SPACE &lt LOWER RET &lt RAISE RET &kp N0 &kp KP_DOT &kp SPACE &kp LCTRL               &lt RAISE RET &SandS LSHFT SPACE           &kp LCTRL  &kp LEFT &kp DOWN &kp RIGHT
            >;
        };
//NAGINATA
        layer_1 {
            bindings =<
                &kp ESC        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11                                      &kp F12 &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp PSCRN &tog_ls_off &tog_ls_on &kp DEL
				&kp GRAVE      &kp N1 &kp N2 &kp N3 &kp N4 &kp N5  &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS                                     &kp INT1 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS &kp INT3
				&kp TAB        &kp Q &kp W  &kp E  &kp R  &kp T    &kp Y &kp U &kp I &kp O &kp P &kp EQUAL                                          &kp APOS &kp Y &kp U &kp I &kp O &kp P &kp EQUAL &kp LBKT
				&mt LCTRL CAPS &kp A  &kp S  &kp D  &kp F &kp G    &kp H &kp J &kp K &kp L &kp SEMI &kp SQT                                         &kp LBKT &kp H &kp J &kp K &kp L &kp SEMI &kp SQT &kp RBKT 
				&kp LSHFT      &kp Z  &kp X  &kp C  &kp V &kp B    &kp N &kp M &kp COMMA &kp DOT &kp FSLH  &lt SCROLL BACKSLASH                     &kp RBKT &kp N &kp M &kp COMMA &kp DOT &kp FSLH  &lt SCROLL BACKSLASH &kp UP
				&kp LCTRL      &kp LWIN &kp LALT &mo NAGINATA &lt MUHEN BSPC &SandS LSHFT SPACE &lt LOWER RET &lt RAISE RET &SandS LSHFT SPACE &kp A &kp B &kp LCTRL               &lt RAISE RET  &SandS LSHFT SPACE           &kp LCTRL  &kp LEFT &kp DOWN &kp RIGHT
            >;
        };
//Mouse
        layer_2 {
            bindings =<
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &mkp RCLK &mkp MCLK &mkp_exit_AML LCLK &msc SCRL_UP    &msc SCRL_LEFT &trans &trans &trans &trans &trans      &msc SCRL_LEFT   &msc SCRL_UP    &mkp LCLK &mkp LCLK  &mkp MCLK       &mkp RCLK &trans &trans
				&trans &trans &trans &mkp MB4 &mkp MB5 &msc SCRL_DOWN  &msc SCRL_RIGHT &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans               &trans &trans &trans &trans
            >;
        };
//LOWER
        layer_3 {
            bindings =<
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &kp LS(N1)  &kp LS(N2) &kp LS(N3) &kp LS(N4)  &kp LS(N5) &trans &trans &trans &trans &trans &trans               &trans &kp LS(N6)  &kp LS(N7) &kp LS(N8) &kp LS(N9)  &kp LS(N0) &trans &trans
				&trans &kp N1  &kp N2 &kp N3 &kp N4  &kp N5 &trans &trans &trans &trans &trans &trans               &trans &kp N6 &kp N7  &kp N8 &kp N9 &kp N0 &trans &trans
				&trans &kp LS(N1)  &kp LS(N2) &kp LS(N3) &kp LS(N4)  &kp LS(N5) &trans &trans &trans &trans &trans &trans               &trans &kp LS(N6)  &kp LS(N7) &kp LS(N8) &kp LS(N9)  &kp LS(N0) &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans               &trans &trans &trans &trans
            >;
        };
//RAISE
        layer_4 {
            bindings =<
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &kp LC(F1)   &kp LC(F2)   &kp LC(F3)   &kp LC(F4)     &kp LC(F5) &trans &trans &trans &trans &trans &trans               &trans &kp LC(F6)       &kp LC(F7)       &kp LC(F8)       &kp LC(F9)        &kp LC(F10)   &kp LC(F11)     &trans
				&trans &kp LC(HOME) &kp PG_UP    &kp LC(UP)   &kp PG_DN      &kp LC(END) &trans &trans &trans &trans &trans &trans               &trans &kp LC(LS(HOME)) &kp LC(PG_UP)    &kp LC(LS(UP))   &kp LC(PG_DN)     &kp LC(SPACE) &kp LC(LS(DEL))  &trans 
				&trans &kp HOME     &kp LC(LEFT) &kp LC(DOWN) &kp LC(RIGHT)  &kp END &kp KP_NUM  &trans &trans &trans &trans &trans              &kp LC(F8)        &kp SPACE        &kp LC(LS(LEFT)) &kp LC(LS(DOWN)) &kp LC(LS(RIGHT)) &kp LS(SPACE) &kp LC(END)    &trans
				&trans &kp LC(F8)   &kp F2       &kp F3       &kp F4         &kp F5   &kp LC(F12) &trans &trans &trans &trans &trans             &kp LG(LS(PSCRN)) &kp F6           &kp F7           &kp F8           &kp F9            &kp F10       &kp F11   &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans               &trans &trans &trans &trans
            >;
        };
//ADJUST
        layer_5 {
            bindings =<
                &trans &trans &trans &trans &trans &trans &trans &bt BT_CLR_ALL &bt BT_CLR &out OUT_TOG &bt BT_SEL 0 &bt BT_SEL 1              &bt BT_CLR_ALL &bt BT_CLR &out OUT_TOG &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &kp HOME &kp PG_UP &kp PG_DN &kp END &trans &trans &trans &trans &trans &trans &trans               &trans &trans &kp HOME &kp PG_UP &kp PG_DN &kp END &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans               &trans &trans &trans &trans
            >;
        };
//MOD
        layer_6 {
            bindings =<
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans               &trans &trans &trans &trans
            >;
        };
//MUHEN
        layer_7 {
            bindings =<
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &kp LC(EXCL) &kp LC(AT) &kp LC(HASH)    &kp LC(DLLR)       &kp LC(PRCNT) &trans &trans &trans &trans &trans &trans           &trans &kp LC(CARET)  &kp LC(AMPS)   &kp LC(ASTRK) &kp LC(LPAR) &kp LC(RPAR) &trans &trans
				&trans &kp HOME       &kp F17        &kp UP        &kp LS(RIGHT)   &kp END  &trans &trans &trans &trans &trans &trans               &trans &kp LALT       &kp LC(U)        &kp TAB        &kp F7         &kp LC(P)       &kp PG_DN &trans
				&trans &kp LC(BSPC)   &kp LEFT       &kp DOWN      &kp RIGHT       &kp DEL &kp KP_NUM &trans &trans &trans &trans &trans            &kp LC(F8) &kp BSPC       &kp LG(SLASH)    &kp LC(Z)      &kp LA(TAB)    &kp LC(LA(TAB))   &kp LC(F) &trans
				&trans &kp LC(D)      &kp LC(X)      &kp  LC(C)    &kp LC(V)       &kp F16 &kp F12 &trans &trans &trans &trans &trans               &kp RBKT  &kp LC(LA(TAB)) &kp LC(LS(TAB))  &kp LC(Y)      &kp LC(TAB)    &kp LG(TAB)     &kp LG(D) &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans               &kp LC(W) &kp LC(W) &trans &trans
            >;
        };
//HENKA not use now
        layer_8 {
            bindings =<
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans               &trans &trans               &trans &trans &trans &trans
            >;
        };
    };
};
